/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.64
 * Generated at: 2022-09-26 08:13:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>간편로그인</title>\r\n");
      out.write("	<link rel=\"stylesheet\" type=\"text/css\" href=\"/DoZip/css/login.css\" />\r\n");
      out.write("	<!-- 카카오 스크립트 -->\r\n");
      out.write("	<script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		Kakao.init('3d8bfa3cbe8aabf2dd47e365262af246'); \r\n");
      out.write("		//발급받은 키 중 javascript키를 사용해준다.\r\n");
      out.write("		console.log(Kakao.isInitialized()); // sdk초기화여부판단\r\n");
      out.write("		\r\n");
      out.write("		//카카오로그인\r\n");
      out.write("		function kakaoLogin() {\r\n");
      out.write("			Kakao.Auth.login({\r\n");
      out.write("				success : function(response) {\r\n");
      out.write("					Kakao.API.request({\r\n");
      out.write("						url : '/v2/user/me',\r\n");
      out.write("						success : function(response) {\r\n");
      out.write("							console.log(response)\r\n");
      out.write("						},\r\n");
      out.write("						fail : function(error) {\r\n");
      out.write("							console.log(error)\r\n");
      out.write("						},\r\n");
      out.write("					})\r\n");
      out.write("				},\r\n");
      out.write("				fail : function(error) {\r\n");
      out.write("					console.log(error)\r\n");
      out.write("				},\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"login_wrap\">\r\n");
      out.write("	<div>\r\n");
      out.write("	<p id=\"login_title\">두집 시작하기</p>\r\n");
      out.write("	<p id=\"login_info\">간편하게 소셜 계정으로<br/> 다양한 두집의 서비스를 이용해보세요!</p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div id=\"kakao_login\">\r\n");
      out.write("		<p><button id=\"kakao_btn\" type=\"button\" onclick=\"kakaoLogin();\">\r\n");
      out.write("			<a href=\"javascrip:void(0)\">카카오	로그인</a>\r\n");
      out.write("		</button></p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div id=\"naver_login\">\r\n");
      out.write("		<p><button id=\"naver_btn\" type=\"button\"  onclick=\"openPopUp();\">\r\n");
      out.write("			<a href=\"javascript:void(0)\">네이버	로그인</a>\r\n");
      out.write("		</button></p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div id=\"facebook_login\">\r\n");
      out.write("		<p><button id=\"facebook_btn\" type=\"button\" onclick=\"kakaoLogin();\">\r\n");
      out.write("			<a href=\"javascrip:void(0)\">페이스북	로그인</a>\r\n");
      out.write("		</button></p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div id=\"google_login\">\r\n");
      out.write("		<p><button id=\"google_btn\" type=\"button\" onclick=\"kakaoLogin();\">\r\n");
      out.write("			<a href=\"javascrip:void(0)\">구글	로그인</a>\r\n");
      out.write("		</button></p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div id=\"id_login\">\r\n");
      out.write("		<p><a href=\"#none\" onclick=\"openIdLogin();\">아이디로 로그인하기</a></p>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 버튼보다 아래에 있어야 제대로 작동하며, 함수명을 변경하면 작동하지 않음 (유의) -->\r\n");
      out.write("<!-- 아이디로 로그인 -->\r\n");
      out.write("	<script>\r\n");
      out.write("    function openIdLogin(){\r\n");
      out.write("        window.open(\"member_id_login.do\", \"_self\", \"toolbar=no, menubar=no, scrollbars=yes, resizable=no\" );\r\n");
      out.write("    }\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 네이버 스크립트 -->\r\n");
      out.write("	<script src=\"https://static.nid.naver.com/js/naveridlogin_js_sdk_2.0.2.js\" charset=\"utf-8\"></script>\r\n");
      out.write("	<script>	\r\n");
      out.write("	var naverLogin = new naver.LoginWithNaverId(\r\n");
      out.write("			{\r\n");
      out.write("				clientId: \"2X8n1s3lCX9_JCYqBMBc\", //내 애플리케이션 정보에 cliendId를 입력해줍니다.\r\n");
      out.write("				callbackUrl: \"http://localhost:8080/index.jsp\", // 내 애플리케이션 API설정의 Callback URL 을 입력해줍니다.\r\n");
      out.write("				isPopup: true,\r\n");
      out.write("				callbackHandle: true\r\n");
      out.write("			}\r\n");
      out.write("		);	\r\n");
      out.write("	\r\n");
      out.write("	naverLogin.init();\r\n");
      out.write("	\r\n");
      out.write("	function openPopUp() {\r\n");
      out.write("	    window.open(\"https://nid.naver.com/nidlogin.logout\", \"_blank\", \"toolbar=no, menubar=no, scrollbars=yes, resizable=no, width=500, height=600, left=0, top=0\");\r\n");
      out.write("	}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
